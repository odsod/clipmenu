#!/usr/bin/env python3

import jinja2
import jinja2.meta
import yaml
import os
import subprocess


def select_one(options):
    return (subprocess.run(
        ['dmenu'],
        stdout=subprocess.PIPE,
        input='\n'.join(options).encode())
        .stdout
        .decode()
        .strip())


def prompt(prompt_str):
    return (subprocess.run(
        ['dmenu', '-p', prompt_str + ':'],
        stdout=subprocess.PIPE,
        input=''.encode())
        .stdout
        .decode()
        .strip())


def insert_into_clipboard(str):
    return subprocess.run(
        ['xclip', '-i', '-selection', 'clipboard'],
        input=str.encode())


def variables(template_str):
    env = jinja2.Environment()
    ast = env.parse(template_str)
    return jinja2.meta.find_undeclared_variables(ast)


def render(template_str, variables):
    env = jinja2.Environment(undefined=jinja2.StrictUndefined)
    template = env.from_string(template_str, globals=variables)
    return template.render()


def main():
    command_templates = {}
    templates_dir = os.path.expanduser('~/.clipmenu')
    for templates_file in os.listdir(templates_dir):
        if templates_file.endswith('.yaml'):
            with open(os.path.join(templates_dir, templates_file), 'r') as f:
                command_templates.update(yaml.load(f.read()))
    command_template = command_templates[select_one(command_templates.keys())]
    command = render(command_template, variables={
        variable: prompt(variable)
        for variable in variables(command_template)
    })
    insert_into_clipboard(command)


if __name__ == '__main__':
    main()
